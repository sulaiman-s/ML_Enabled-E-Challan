{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { UnavailabilityError } from 'expo-modules-core';\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport ExponentPrint from \"./ExponentPrint\";\nexport var Orientation = ExponentPrint.Orientation;\nexport function printAsync(options) {\n  return _regeneratorRuntime.async(function printAsync$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          if (!(Platform.OS === 'web')) {\n            _context.next = 4;\n            break;\n          }\n\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(ExponentPrint.print(options));\n\n        case 3:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 4:\n          if (!(!options.uri && !options.html && Platform.OS === 'ios' && !options.markupFormatterIOS)) {\n            _context.next = 6;\n            break;\n          }\n\n          throw new Error('Must provide either `html` or `uri` to print');\n\n        case 6:\n          if (!(options.uri && options.html)) {\n            _context.next = 8;\n            break;\n          }\n\n          throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n\n        case 8:\n          if (options.markupFormatterIOS !== undefined) {\n            console.warn('The markupFormatterIOS option is deprecated. Use useMarkupFormatter instead.');\n          }\n\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(ExponentPrint.print(options));\n\n        case 11:\n          return _context.abrupt(\"return\", _context.sent);\n\n        case 12:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function selectPrinterAsync() {\n  return _regeneratorRuntime.async(function selectPrinterAsync$(_context2) {\n    while (1) {\n      switch (_context2.prev = _context2.next) {\n        case 0:\n          if (!ExponentPrint.selectPrinter) {\n            _context2.next = 4;\n            break;\n          }\n\n          _context2.next = 3;\n          return _regeneratorRuntime.awrap(ExponentPrint.selectPrinter());\n\n        case 3:\n          return _context2.abrupt(\"return\", _context2.sent);\n\n        case 4:\n          throw new UnavailabilityError('Print', 'selectPrinterAsync');\n\n        case 5:\n        case \"end\":\n          return _context2.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}\nexport function printToFileAsync() {\n  var options,\n      _args3 = arguments;\n  return _regeneratorRuntime.async(function printToFileAsync$(_context3) {\n    while (1) {\n      switch (_context3.prev = _context3.next) {\n        case 0:\n          options = _args3.length > 0 && _args3[0] !== undefined ? _args3[0] : {};\n          _context3.next = 3;\n          return _regeneratorRuntime.awrap(ExponentPrint.printToFileAsync(options));\n\n        case 3:\n          return _context3.abrupt(\"return\", _context3.sent);\n\n        case 4:\n        case \"end\":\n          return _context3.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["../src/Print.ts"],"names":[],"mappings":";AAAA,SAAS,mBAAT,QAAoC,mBAApC;;AAGA,OAAO,aAAP;AAeA,OAAO,IAAM,WAAW,GAAoB,aAAa,CAAC,WAAnD;AAWP,OAAO,SAAe,UAAf,CAA0B,OAA1B;EAAA;IAAA;MAAA;QAAA;UAAA,MACD,QAAQ,CAAC,EAAT,KAAgB,KADf;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAEU,aAAa,CAAC,KAAd,CAAoB,OAApB,CAFV;;QAAA;UAAA;;QAAA;UAAA,MAID,CAAC,OAAO,CAAC,GAAT,IAAgB,CAAC,OAAO,CAAC,IAAzB,IAAiC,QAAQ,CAAC,EAAT,KAAgB,KAAjD,IAA0D,CAAC,OAAO,CAAC,kBAJlE;YAAA;YAAA;UAAA;;UAAA,MAKG,IAAI,KAAJ,CAAU,8CAAV,CALH;;QAAA;UAAA,MAOD,OAAO,CAAC,GAAR,IAAe,OAAO,CAAC,IAPtB;YAAA;YAAA;UAAA;;UAAA,MAQG,IAAI,KAAJ,CAAU,sEAAV,CARH;;QAAA;UAUL,IAAI,OAAO,CAAC,kBAAR,KAA+B,SAAnC,EAA8C;YAC5C,OAAO,CAAC,IAAR,CAAa,8EAAb;UACD;;UAZI;UAAA,iCAaQ,aAAa,CAAC,KAAd,CAAoB,OAApB,CAbR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAqBP,OAAO,SAAe,kBAAf;EAAA;IAAA;MAAA;QAAA;UAAA,KACD,aAAa,CAAC,aADb;YAAA;YAAA;UAAA;;UAAA;UAAA,iCAEU,aAAa,CAAC,aAAd,EAFV;;QAAA;UAAA;;QAAA;UAAA,MAKC,IAAI,mBAAJ,CAAwB,OAAxB,EAAiC,oBAAjC,CALD;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA;AAcP,OAAO,SAAe,gBAAf;EAAA;EAAA;EAAA;IAAA;MAAA;QAAA;UAAgC,OAAhC,8DAA4D,EAA5D;UAAA;UAAA,iCACQ,aAAa,CAAC,gBAAd,CAA+B,OAA/B,CADR;;QAAA;UAAA;;QAAA;QAAA;UAAA;MAAA;IAAA;EAAA;AAAA","sourcesContent":["import { UnavailabilityError } from 'expo-modules-core';\nimport { Platform } from 'react-native';\n\nimport ExponentPrint from './ExponentPrint';\nimport {\n  FilePrintOptions,\n  FilePrintResult,\n  OrientationType,\n  PrintOptions,\n  Printer,\n} from './Print.types';\n\nexport { FilePrintOptions, FilePrintResult, OrientationType, PrintOptions, Printer };\n\n// @needsAudit @docsMissing\n/**\n * The orientation of the printed content.\n */\nexport const Orientation: OrientationType = ExponentPrint.Orientation;\n\n// @needsAudit\n/**\n * Prints a document or HTML, on web this prints the HTML from the page.\n * > Note: On iOS, printing from HTML source doesn't support local asset URLs (due to `WKWebView`\n * > limitations). As a workaround you can use inlined base64-encoded strings.\n * > See [this comment](https://github.com/expo/expo/issues/7940#issuecomment-657111033) for more details.\n * @param options A map defining what should be printed.\n * @return Resolves to an empty `Promise` if printing started.\n */\nexport async function printAsync(options: PrintOptions): Promise<void> {\n  if (Platform.OS === 'web') {\n    return await ExponentPrint.print(options);\n  }\n  if (!options.uri && !options.html && Platform.OS === 'ios' && !options.markupFormatterIOS) {\n    throw new Error('Must provide either `html` or `uri` to print');\n  }\n  if (options.uri && options.html) {\n    throw new Error('Must provide exactly one of `html` and `uri` but both were specified');\n  }\n  if (options.markupFormatterIOS !== undefined) {\n    console.warn('The markupFormatterIOS option is deprecated. Use useMarkupFormatter instead.');\n  }\n  return await ExponentPrint.print(options);\n}\n\n// @needsAudit\n/**\n * **Available on iOS only.** Chooses a printer that can be later used in `printAsync`\n * @return A promise which fulfils with an object containing `name` and `url` of the selected printer.\n */\nexport async function selectPrinterAsync(): Promise<Printer> {\n  if (ExponentPrint.selectPrinter) {\n    return await ExponentPrint.selectPrinter();\n  }\n\n  throw new UnavailabilityError('Print', 'selectPrinterAsync');\n}\n\n// @needsAudit\n/**\n * Prints HTML to PDF file and saves it to [app's cache directory](./filesystem/#filesystemcachedirectory).\n * On Web this method opens the print dialog.\n * @param options A map of print options.\n */\nexport async function printToFileAsync(options: FilePrintOptions = {}): Promise<FilePrintResult> {\n  return await ExponentPrint.printToFileAsync(options);\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}