{"ast":null,"code":"import { getHeaderTitle, Header, HeaderBackButton, SafeAreaProviderCompat, Screen } from '@react-navigation/elements';\nimport * as React from 'react';\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport View from \"react-native-web/dist/exports/View\";\nexport default function NativeStackView(_ref) {\n  var state = _ref.state,\n      descriptors = _ref.descriptors;\n  return React.createElement(SafeAreaProviderCompat, null, React.createElement(View, {\n    style: styles.container\n  }, state.routes.map(function (route, i) {\n    var _state$routes;\n\n    var isFocused = state.index === i;\n    var canGoBack = i !== 0;\n    var previousKey = (_state$routes = state.routes[i - 1]) === null || _state$routes === void 0 ? void 0 : _state$routes.key;\n    var previousDescriptor = previousKey ? descriptors[previousKey] : undefined;\n    var _descriptors$route$ke = descriptors[route.key],\n        options = _descriptors$route$ke.options,\n        navigation = _descriptors$route$ke.navigation,\n        render = _descriptors$route$ke.render;\n    var header = options.header,\n        headerShown = options.headerShown,\n        headerTintColor = options.headerTintColor,\n        headerBackImageSource = options.headerBackImageSource,\n        headerLeft = options.headerLeft,\n        headerRight = options.headerRight,\n        headerTitle = options.headerTitle,\n        headerTitleAlign = options.headerTitleAlign,\n        headerTitleStyle = options.headerTitleStyle,\n        headerStyle = options.headerStyle,\n        headerShadowVisible = options.headerShadowVisible,\n        headerTransparent = options.headerTransparent,\n        contentStyle = options.contentStyle,\n        headerBackTitle = options.headerBackTitle;\n    return React.createElement(Screen, {\n      key: route.key,\n      focused: isFocused,\n      route: route,\n      navigation: navigation,\n      headerShown: headerShown,\n      headerTransparent: headerTransparent,\n      header: header !== undefined ? header({\n        back: previousDescriptor ? {\n          title: getHeaderTitle(previousDescriptor.options, previousDescriptor.route.name)\n        } : undefined,\n        options: options,\n        route: route,\n        navigation: navigation\n      }) : React.createElement(Header, {\n        title: getHeaderTitle(options, route.name),\n        headerTintColor: headerTintColor,\n        headerLeft: typeof headerLeft === 'function' ? function (_ref2) {\n          var tintColor = _ref2.tintColor;\n          return headerLeft({\n            tintColor: tintColor,\n            canGoBack: canGoBack,\n            label: headerBackTitle\n          });\n        } : headerLeft === undefined && canGoBack ? function (_ref3) {\n          var tintColor = _ref3.tintColor;\n          return React.createElement(HeaderBackButton, {\n            tintColor: tintColor,\n            backImage: headerBackImageSource !== undefined ? function () {\n              return React.createElement(Image, {\n                source: headerBackImageSource,\n                style: [styles.backImage, {\n                  tintColor: tintColor\n                }]\n              });\n            } : undefined,\n            onPress: navigation.goBack,\n            canGoBack: canGoBack\n          });\n        } : headerLeft,\n        headerRight: typeof headerRight === 'function' ? function (_ref4) {\n          var tintColor = _ref4.tintColor;\n          return headerRight({\n            tintColor: tintColor\n          });\n        } : headerRight,\n        headerTitle: typeof headerTitle === 'function' ? function (_ref5) {\n          var children = _ref5.children,\n              tintColor = _ref5.tintColor;\n          return headerTitle({\n            children: children,\n            tintColor: tintColor\n          });\n        } : headerTitle,\n        headerTitleAlign: headerTitleAlign,\n        headerTitleStyle: headerTitleStyle,\n        headerStyle: [headerTransparent ? {\n          position: 'absolute',\n          backgroundColor: 'transparent'\n        } : null, headerStyle, headerShadowVisible === false ? {\n          shadowOpacity: 0,\n          borderBottomWidth: 0\n        } : null]\n      }),\n      style: [StyleSheet.absoluteFill, {\n        display: isFocused ? 'flex' : 'none'\n      }]\n    }, React.createElement(View, {\n      style: [styles.contentContainer, contentStyle]\n    }, render()));\n  })));\n}\nvar styles = StyleSheet.create({\n  container: {\n    flex: 1\n  },\n  contentContainer: {\n    flex: 1\n  },\n  backImage: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain'\n  }\n});","map":{"version":3,"sources":["NativeStackView.tsx"],"names":["descriptors","styles","container","isFocused","state","canGoBack","i","previousKey","previousDescriptor","render","route","headerBackTitle","header","back","title","getHeaderTitle","options","navigation","tintColor","headerLeft","label","headerRight","headerTitle","children","headerTransparent","position","backgroundColor","shadowOpacity","borderBottomWidth","StyleSheet","display","flex","contentContainer","backImage","height","width","margin","resizeMode"],"mappings":"AAAA,SAAA,cAAA,EAAA,MAAA,EAAA,gBAAA,EAAA,sBAAA,EAAA,MAAA,QAAA,4BAAA;AAWA,OAAO,KAAP,KAAA,MAAA,OAAA;;;;AAgBA,eAAe,SAAA,eAAA,OAAwD;EAAA,IAA/B,KAA+B,QAA/B,KAA+B;EAAA,IAAtBA,WAAsB,QAAtBA,WAAsB;EACrE,OACE,KAAA,CAAA,aAAA,CAAA,sBAAA,EAAA,IAAA,EACE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;IAAM,KAAK,EAAEC,MAAM,CAACC;EAApB,CAAA,EACG,KAAK,CAAL,MAAA,CAAA,GAAA,CAAiB,UAAA,KAAA,EAAA,CAAA,EAAc;IAAA,IAAA,aAAA;;IAC9B,IAAMC,SAAS,GAAGC,KAAK,CAALA,KAAAA,KAAlB,CAAA;IACA,IAAMC,SAAS,GAAGC,CAAC,KAAnB,CAAA;IACA,IAAMC,WAAW,GAAA,CAAA,aAAA,GAAGH,KAAK,CAALA,MAAAA,CAAaE,CAAC,GAAjB,CAAGF,CAAH,MAAA,IAAA,IAAA,aAAA,KAAA,KAAA,CAAA,GAAA,KAAA,CAAA,GAAGA,aAAAA,CAApB,GAAA;IACA,IAAMI,kBAAkB,GAAGD,WAAW,GAClCP,WAAW,CADuB,WACvB,CADuB,GAAtC,SAAA;IAGA,4BAAwCA,WAAW,CAACU,KAAK,CAAzD,GAAmD,CAAnD;IAAA,IAAM,OAAN,yBAAM,OAAN;IAAA,IAAM,UAAN,yBAAM,UAAN;IAAA,IAA6BD,MAA7B,yBAA6BA,MAA7B;IAEA,IAAM,MAAN,GAAA,OAAA,CAAM,MAAN;IAAA,IAAM,WAAN,GAAA,OAAA,CAAM,WAAN;IAAA,IAAM,eAAN,GAAA,OAAA,CAAM,eAAN;IAAA,IAAM,qBAAN,GAAA,OAAA,CAAM,qBAAN;IAAA,IAAM,UAAN,GAAA,OAAA,CAAM,UAAN;IAAA,IAAM,WAAN,GAAA,OAAA,CAAM,WAAN;IAAA,IAAM,WAAN,GAAA,OAAA,CAAM,WAAN;IAAA,IAAM,gBAAN,GAAA,OAAA,CAAM,gBAAN;IAAA,IAAM,gBAAN,GAAA,OAAA,CAAM,gBAAN;IAAA,IAAM,WAAN,GAAA,OAAA,CAAM,WAAN;IAAA,IAAM,mBAAN,GAAA,OAAA,CAAM,mBAAN;IAAA,IAAM,iBAAN,GAAA,OAAA,CAAM,iBAAN;IAAA,IAAM,YAAN,GAAA,OAAA,CAAM,YAAN;IAAA,IAcEE,eAdF,GAAA,OAAA,CAcEA,eAdF;IAiBA,OACE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;MACE,GAAG,EAAED,KAAK,CADZ,GAAA;MAEE,OAAO,EAFT,SAAA;MAGE,KAAK,EAHP,KAAA;MAIE,UAAU,EAJZ,UAAA;MAKE,WAAW,EALb,WAAA;MAME,iBAAiB,EANnB,iBAAA;MAOE,MAAM,EACJ,MAAM,KAAN,SAAA,GACEE,MAAM,CAAC;QACLC,IAAI,EAAEL,kBAAkB,GACpB;UACEM,KAAK,EAAEC,cAAc,CACnBP,kBAAkB,CADC,OAAA,EAEnBA,kBAAkB,CAAlBA,KAAAA,CAFmB,IAAA;QADvB,CADoB,GADnB,SAAA;QASLQ,OATK,EASLA,OATK;QAULN,KAVK,EAULA,KAVK;QAWLO,UAAAA,EAAAA;MAXK,CAAD,CADR,GAeE,KAAA,CAAA,aAAA,CAAA,MAAA,EAAA;QACE,KAAK,EAAEF,cAAc,CAAA,OAAA,EAAUL,KAAK,CADtC,IACuB,CADvB;QAEE,eAAe,EAFjB,eAAA;QAGE,UAAU,EACR,OAAA,UAAA,KAAA,UAAA,GACI;UAAA,IAAGQ,SAAH,SAAGA,SAAH;UAAA,OACEC,UAAU,CAAC;YACTD,SADS,EACTA,SADS;YAETb,SAFS,EAETA,SAFS;YAGTe,KAAK,EAAET;UAHE,CAAD,CADZ;QAAA,CADJ,GAOI,UAAU,KAAV,SAAA,IAAA,SAAA,GACA;UAAA,IAAGO,SAAH,SAAGA,SAAH;UAAA,OACE,KAAA,CAAA,aAAA,CAAA,gBAAA,EAAA;YACE,SAAS,EADX,SAAA;YAEE,SAAS,EACP,qBAAqB,KAArB,SAAA,GACI;cAAA,OACE,KAAA,CAAA,aAAA,CAAA,KAAA,EAAA;gBACE,MAAM,EADR,qBAAA;gBAEE,KAAK,EAAE,CACLjB,MAAM,CADD,SAAA,EAEL;kBAAEiB,SAAAA,EAAAA;gBAAF,CAFK;cAFT,CAAA,CADF;YAAA,CADJ,GAHJ,SAAA;YAeE,OAAO,EAAED,UAAU,CAfrB,MAAA;YAgBE,SAAS,EAAEZ;UAhBb,CAAA,CADF;QAAA,CADA,GAXR,UAAA;QAkCE,WAAW,EACT,OAAA,WAAA,KAAA,UAAA,GACI;UAAA,IAAGa,SAAH,SAAGA,SAAH;UAAA,OAAmBG,WAAW,CAAC;YAAEH,SAAAA,EAAAA;UAAF,CAAD,CAA9B;QAAA,CADJ,GAnCJ,WAAA;QAuCE,WAAW,EACT,OAAA,WAAA,KAAA,UAAA,GACI;UAAA,IAAC,QAAD,SAAC,QAAD;UAAA,IAAaA,SAAb,SAAaA,SAAb;UAAA,OACEI,WAAW,CAAC;YAAEC,QAAF,EAAEA,QAAF;YAAYL,SAAAA,EAAAA;UAAZ,CAAD,CADb;QAAA,CADJ,GAxCJ,WAAA;QA6CE,gBAAgB,EA7ClB,gBAAA;QA8CE,gBAAgB,EA9ClB,gBAAA;QA+CE,WAAW,EAAE,CACXM,iBAAiB,GACb;UACEC,QAAQ,EADV,UAAA;UAEEC,eAAe,EAAE;QAFnB,CADa,GADN,IAAA,EAAA,WAAA,EAQX,mBAAmB,KAAnB,KAAA,GACI;UAAEC,aAAa,EAAf,CAAA;UAAoBC,iBAAiB,EAAE;QAAvC,CADJ,GARW,IAAA;MA/Cf,CAAA,CAvBN;MAqFE,KAAK,EAAE,CACLC,UAAU,CADL,YAAA,EAEL;QAAEC,OAAO,EAAE3B,SAAS,GAAA,MAAA,GAAY;MAAhC,CAFK;IArFT,CAAA,EA0FE,KAAA,CAAA,aAAA,CAAA,IAAA,EAAA;MAAM,KAAK,EAAE,CAACF,MAAM,CAAP,gBAAA,EAAA,YAAA;IAAb,CAAA,EACGQ,MA5FP,EA2FI,CA1FF,CADF;EA7BR,CAGO,CADH,CADF,CADF;AAiID;AAED,IAAMR,MAAM,GAAG,UAAU,CAAV,MAAA,CAAkB;EAC/BC,SAAS,EAAE;IACT6B,IAAI,EAAE;EADG,CADoB;EAI/BC,gBAAgB,EAAE;IAChBD,IAAI,EAAE;EADU,CAJa;EAO/BE,SAAS,EAAE;IACTC,MAAM,EADG,EAAA;IAETC,KAAK,EAFI,EAAA;IAGTC,MAAM,EAHG,CAAA;IAITC,UAAU,EAAE;EAJH;AAPoB,CAAlB,CAAf","sourcesContent":["import {\n  getHeaderTitle,\n  Header,\n  HeaderBackButton,\n  SafeAreaProviderCompat,\n  Screen,\n} from '@react-navigation/elements';\nimport type {\n  ParamListBase,\n  StackNavigationState,\n} from '@react-navigation/native';\nimport * as React from 'react';\nimport { Image, StyleSheet, View } from 'react-native';\n\nimport type {\n  NativeStackDescriptorMap,\n  NativeStackNavigationHelpers,\n} from '../types';\n\ntype Props = {\n  state: StackNavigationState<ParamListBase>;\n  // This is used for the native implementation of the stack.\n  // eslint-disable-next-line react/no-unused-prop-types\n  navigation: NativeStackNavigationHelpers;\n  descriptors: NativeStackDescriptorMap;\n};\n\nexport default function NativeStackView({ state, descriptors }: Props) {\n  return (\n    <SafeAreaProviderCompat>\n      <View style={styles.container}>\n        {state.routes.map((route, i) => {\n          const isFocused = state.index === i;\n          const canGoBack = i !== 0;\n          const previousKey = state.routes[i - 1]?.key;\n          const previousDescriptor = previousKey\n            ? descriptors[previousKey]\n            : undefined;\n          const { options, navigation, render } = descriptors[route.key];\n\n          const {\n            header,\n            headerShown,\n            headerTintColor,\n            headerBackImageSource,\n            headerLeft,\n            headerRight,\n            headerTitle,\n            headerTitleAlign,\n            headerTitleStyle,\n            headerStyle,\n            headerShadowVisible,\n            headerTransparent,\n            contentStyle,\n            headerBackTitle,\n          } = options;\n\n          return (\n            <Screen\n              key={route.key}\n              focused={isFocused}\n              route={route}\n              navigation={navigation}\n              headerShown={headerShown}\n              headerTransparent={headerTransparent}\n              header={\n                header !== undefined ? (\n                  header({\n                    back: previousDescriptor\n                      ? {\n                          title: getHeaderTitle(\n                            previousDescriptor.options,\n                            previousDescriptor.route.name\n                          ),\n                        }\n                      : undefined,\n                    options,\n                    route,\n                    navigation,\n                  })\n                ) : (\n                  <Header\n                    title={getHeaderTitle(options, route.name)}\n                    headerTintColor={headerTintColor}\n                    headerLeft={\n                      typeof headerLeft === 'function'\n                        ? ({ tintColor }) =>\n                            headerLeft({\n                              tintColor,\n                              canGoBack,\n                              label: headerBackTitle,\n                            })\n                        : headerLeft === undefined && canGoBack\n                        ? ({ tintColor }) => (\n                            <HeaderBackButton\n                              tintColor={tintColor}\n                              backImage={\n                                headerBackImageSource !== undefined\n                                  ? () => (\n                                      <Image\n                                        source={headerBackImageSource}\n                                        style={[\n                                          styles.backImage,\n                                          { tintColor },\n                                        ]}\n                                      />\n                                    )\n                                  : undefined\n                              }\n                              onPress={navigation.goBack}\n                              canGoBack={canGoBack}\n                            />\n                          )\n                        : headerLeft\n                    }\n                    headerRight={\n                      typeof headerRight === 'function'\n                        ? ({ tintColor }) => headerRight({ tintColor })\n                        : headerRight\n                    }\n                    headerTitle={\n                      typeof headerTitle === 'function'\n                        ? ({ children, tintColor }) =>\n                            headerTitle({ children, tintColor })\n                        : headerTitle\n                    }\n                    headerTitleAlign={headerTitleAlign}\n                    headerTitleStyle={headerTitleStyle}\n                    headerStyle={[\n                      headerTransparent\n                        ? {\n                            position: 'absolute',\n                            backgroundColor: 'transparent',\n                          }\n                        : null,\n                      headerStyle,\n                      headerShadowVisible === false\n                        ? { shadowOpacity: 0, borderBottomWidth: 0 }\n                        : null,\n                    ]}\n                  />\n                )\n              }\n              style={[\n                StyleSheet.absoluteFill,\n                { display: isFocused ? 'flex' : 'none' },\n              ]}\n            >\n              <View style={[styles.contentContainer, contentStyle]}>\n                {render()}\n              </View>\n            </Screen>\n          );\n        })}\n      </View>\n    </SafeAreaProviderCompat>\n  );\n}\n\nconst styles = StyleSheet.create({\n  container: {\n    flex: 1,\n  },\n  contentContainer: {\n    flex: 1,\n  },\n  backImage: {\n    height: 24,\n    width: 24,\n    margin: 3,\n    resizeMode: 'contain',\n  },\n});\n"]},"metadata":{},"sourceType":"module"}