{"ast":null,"code":"import _extends from \"@babel/runtime/helpers/extends\";\nimport _defineProperty from \"@babel/runtime/helpers/defineProperty\";\nimport _classCallCheck from \"@babel/runtime/helpers/classCallCheck\";\nimport _createClass from \"@babel/runtime/helpers/createClass\";\nimport _inherits from \"@babel/runtime/helpers/inherits\";\nimport _possibleConstructorReturn from \"@babel/runtime/helpers/possibleConstructorReturn\";\nimport _getPrototypeOf from \"@babel/runtime/helpers/getPrototypeOf\";\n\nfunction _createForOfIteratorHelperLoose(o, allowArrayLike) { var it = typeof Symbol !== \"undefined\" && o[Symbol.iterator] || o[\"@@iterator\"]; if (it) return (it = it.call(o)).next.bind(it); if (Array.isArray(o) || (it = _unsupportedIterableToArray(o)) || allowArrayLike && o && typeof o.length === \"number\") { if (it) o = it; var i = 0; return function () { if (i >= o.length) return { done: true }; return { done: false, value: o[i++] }; }; } throw new TypeError(\"Invalid attempt to iterate non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nimport React from 'react';\nimport findNodeHandle from \"react-native-web/dist/exports/findNodeHandle\";\nimport Platform from \"react-native-web/dist/exports/Platform\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport ReanimatedEventEmitter from \"./ReanimatedEventEmitter\";\nimport AnimatedEvent from \"./reanimated1/core/AnimatedEvent\";\nimport AnimatedNode from \"./reanimated1/core/AnimatedNode\";\nimport AnimatedValue from \"./reanimated1/core/AnimatedValue\";\nimport { createOrReusePropsNode } from \"./reanimated1/core/AnimatedProps\";\nimport WorkletEventHandler from \"./reanimated2/WorkletEventHandler\";\nimport setAndForwardRef from \"./setAndForwardRef\";\nimport invariant from 'fbjs/lib/invariant';\nimport { adaptViewConfig } from \"./ConfigHelper\";\nimport { RNRenderer } from \"./reanimated2/platform-specific/RNRenderer\";\nvar NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  var component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {}\n\nfunction hasAnimatedNodes(value) {\n  if (value instanceof AnimatedNode) {\n    return true;\n  }\n\n  if (Array.isArray(value)) {\n    return value.some(function (item) {\n      return hasAnimatedNodes(item);\n    });\n  }\n\n  if (value && typeof value === 'object') {\n    return Object.keys(value).some(function (key) {\n      return hasAnimatedNodes(value[key]);\n    });\n  }\n\n  return false;\n}\n\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n\n  var resultArr = [];\n\n  var _flattenArray = function _flattenArray(arr) {\n    arr.forEach(function (item) {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n\n  _flattenArray(array);\n\n  return resultArr;\n}\n\nexport default function createAnimatedComponent(Component) {\n  var options = arguments.length > 1 && arguments[1] !== undefined ? arguments[1] : {};\n  invariant(typeof Component !== 'function' || Component.prototype && Component.prototype.isReactComponent, '`createAnimatedComponent` does not support stateless functional components; ' + 'use a class component instead.');\n\n  var AnimatedComponent = function (_React$Component) {\n    _inherits(AnimatedComponent, _React$Component);\n\n    var _super = _createSuper(AnimatedComponent);\n\n    function AnimatedComponent(props) {\n      var _this;\n\n      _classCallCheck(this, AnimatedComponent);\n\n      _this = _super.call(this, props);\n      _this._invokeAnimatedPropsCallbackOnMount = false;\n\n      _this._animatedPropsCallback = function () {\n        if (_this._component == null) {\n          _this._invokeAnimatedPropsCallbackOnMount = true;\n        } else if (typeof _this._component.setNativeProps !== 'function') {\n          _this.forceUpdate();\n        } else {\n          _this._component.setNativeProps(_this._propsAnimated.__getValue());\n        }\n      };\n\n      _this._setComponentRef = setAndForwardRef({\n        getForwardedRef: function getForwardedRef() {\n          return _this.props.forwardedRef;\n        },\n        setLocalRef: function setLocalRef(ref) {\n          if (ref !== _this._component) {\n            _this._component = ref;\n          }\n\n          if (ref != null && ref.getNode == null) {\n            ref.getNode = function () {\n              var _ref$constructor$name;\n\n              console.warn('%s: Calling %s on the ref of an Animated component ' + 'is no longer necessary. You can now directly use the ref ' + 'instead. This method will be removed in a future release.', (_ref$constructor$name = ref.constructor.name) != null ? _ref$constructor$name : '<<anonymous>>', 'getNode()');\n              return ref;\n            };\n          }\n        }\n      });\n\n      _this._attachProps(_this.props);\n\n      if (process.env.JEST_WORKER_ID) {\n        _this.animatedStyle = {\n          value: {}\n        };\n      }\n\n      return _this;\n    }\n\n    _createClass(AnimatedComponent, [{\n      key: \"componentWillUnmount\",\n      value: function componentWillUnmount() {\n        this._detachPropUpdater();\n\n        this._propsAnimated && this._propsAnimated.__detach();\n\n        this._detachNativeEvents();\n      }\n    }, {\n      key: \"componentDidMount\",\n      value: function componentDidMount() {\n        if (this._invokeAnimatedPropsCallbackOnMount) {\n          this._invokeAnimatedPropsCallbackOnMount = false;\n\n          this._animatedPropsCallback();\n        }\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n\n        this._attachNativeEvents();\n\n        this._attachPropUpdater();\n\n        this._attachAnimatedStyles();\n      }\n    }, {\n      key: \"_getEventViewRef\",\n      value: function _getEventViewRef() {\n        return this._component.getScrollableNode ? this._component.getScrollableNode() : this._component;\n      }\n    }, {\n      key: \"_attachNativeEvents\",\n      value: function _attachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        var viewTag = findNodeHandle(options.setNativeProps ? this : node);\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            prop.attachEvent(node, key);\n          } else if (prop != null && prop.current && prop.current instanceof WorkletEventHandler) {\n            prop.current.registerForEvents(viewTag, key);\n          }\n        }\n      }\n    }, {\n      key: \"_detachNativeEvents\",\n      value: function _detachNativeEvents() {\n        var node = this._getEventViewRef();\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            prop.detachEvent(node, key);\n          } else if (prop != null && prop.current && prop.current instanceof WorkletEventHandler) {\n            prop.current.unregisterFromEvents();\n          }\n        }\n      }\n    }, {\n      key: \"_reattachNativeEvents\",\n      value: function _reattachNativeEvents(prevProps) {\n        var node = this._getEventViewRef();\n\n        var attached = new Set();\n        var nextEvts = new Set();\n        var viewTag;\n\n        for (var key in this.props) {\n          var prop = this.props[key];\n\n          if (prop instanceof AnimatedEvent) {\n            nextEvts.add(prop.__nodeID);\n          } else if (prop != null && prop.current && prop.current instanceof WorkletEventHandler) {\n            if (viewTag === undefined) {\n              viewTag = prop.current.viewTag;\n            }\n          }\n        }\n\n        for (var _key in prevProps) {\n          var _prop = this.props[_key];\n\n          if (_prop instanceof AnimatedEvent) {\n            if (!nextEvts.has(_prop.__nodeID)) {\n              _prop.detachEvent(node, _key);\n            } else {\n              attached.add(_prop.__nodeID);\n            }\n          } else if (_prop != null && _prop.current && _prop.current instanceof WorkletEventHandler && _prop.current.reattachNeeded) {\n            _prop.current.unregisterFromEvents();\n          }\n        }\n\n        for (var _key2 in this.props) {\n          var _prop2 = this.props[_key2];\n\n          if (_prop2 instanceof AnimatedEvent && !attached.has(_prop2.__nodeID)) {\n            _prop2.attachEvent(node, _key2);\n          } else if (_prop2 != null && _prop2.current && _prop2.current instanceof WorkletEventHandler && _prop2.current.reattachNeeded) {\n            _prop2.current.registerForEvents(viewTag, _key2);\n\n            _prop2.current.reattachNeeded = false;\n          }\n        }\n      }\n    }, {\n      key: \"_attachProps\",\n      value: function _attachProps(nextProps) {\n        var oldPropsAnimated = this._propsAnimated;\n        this._propsAnimated = createOrReusePropsNode(nextProps, this._animatedPropsCallback, oldPropsAnimated);\n\n        if (oldPropsAnimated !== this._propsAnimated) {\n          oldPropsAnimated && oldPropsAnimated.__detach();\n        }\n      }\n    }, {\n      key: \"_updateFromNative\",\n      value: function _updateFromNative(props) {\n        if (options.setNativeProps) {\n          options.setNativeProps(this._component, props);\n        } else {\n          var _this$_component$setN, _this$_component;\n\n          (_this$_component$setN = (_this$_component = this._component).setNativeProps) == null ? void 0 : _this$_component$setN.call(_this$_component, props);\n        }\n      }\n    }, {\n      key: \"_attachPropUpdater\",\n      value: function _attachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.set(viewTag, this);\n\n        if (NODE_MAPPING.size === 1) {\n          ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n        }\n      }\n    }, {\n      key: \"_attachAnimatedStyles\",\n      value: function _attachAnimatedStyles() {\n        var _this2 = this,\n            _this$props$animatedP;\n\n        var styles = Array.isArray(this.props.style) ? this.props.style : [this.props.style];\n        styles = flattenArray(styles);\n        var viewTag, viewName;\n\n        if (Platform.OS === 'web') {\n          viewTag = findNodeHandle(this);\n          viewName = null;\n        } else {\n          var _hostInstance$viewCon;\n\n          var hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\n\n          if (!hostInstance) {\n            throw new Error('Cannot find host instance for this component. Maybe it renders nothing?');\n          }\n\n          viewTag = hostInstance == null ? void 0 : hostInstance._nativeTag;\n          viewName = hostInstance == null ? void 0 : (_hostInstance$viewCon = hostInstance.viewConfig) == null ? void 0 : _hostInstance$viewCon.uiViewClassName;\n\n          if (hostInstance && this._hasReanimated2Props(styles) && hostInstance.viewConfig) {\n            adaptViewConfig(hostInstance.viewConfig);\n          }\n        }\n\n        styles.forEach(function (style) {\n          if (style != null && style.viewDescriptor) {\n            style.viewDescriptor.value = {\n              tag: viewTag,\n              name: viewName\n            };\n\n            if (process.env.JEST_WORKER_ID) {\n              _this2.animatedStyle.value = _objectSpread(_objectSpread({}, _this2.animatedStyle.value), style.initial);\n              style.animatedStyle.current = _this2.animatedStyle;\n            }\n          }\n        });\n\n        if ((_this$props$animatedP = this.props.animatedProps) != null && _this$props$animatedP.viewDescriptor) {\n          this.props.animatedProps.viewDescriptor.value = {\n            tag: viewTag,\n            name: viewName\n          };\n        }\n      }\n    }, {\n      key: \"_hasReanimated2Props\",\n      value: function _hasReanimated2Props(flattenStyles) {\n        var _this$props$animatedP2;\n\n        if ((_this$props$animatedP2 = this.props.animatedProps) != null && _this$props$animatedP2.viewDescriptor) {\n          return true;\n        }\n\n        if (this.props.style) {\n          for (var _iterator = _createForOfIteratorHelperLoose(flattenStyles), _step; !(_step = _iterator()).done;) {\n            var style = _step.value;\n\n            if (style != null && style.hasOwnProperty('viewDescriptor')) {\n              return true;\n            }\n          }\n        }\n\n        return false;\n      }\n    }, {\n      key: \"_detachPropUpdater\",\n      value: function _detachPropUpdater() {\n        var viewTag = findNodeHandle(this);\n        NODE_MAPPING.delete(viewTag);\n\n        if (NODE_MAPPING.size === 0) {\n          ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n        }\n      }\n    }, {\n      key: \"componentDidUpdate\",\n      value: function componentDidUpdate(prevProps) {\n        this._attachProps(this.props);\n\n        this._reattachNativeEvents(prevProps);\n\n        this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n      }\n    }, {\n      key: \"_filterNonAnimatedStyle\",\n      value: function _filterNonAnimatedStyle(inputStyle) {\n        var style = {};\n\n        for (var key in inputStyle) {\n          var value = inputStyle[key];\n\n          if (!hasAnimatedNodes(value)) {\n            style[key] = value;\n          } else if (value instanceof AnimatedValue) {\n            style[key] = value._startingValue;\n          }\n        }\n\n        return style;\n      }\n    }, {\n      key: \"_filterNonAnimatedProps\",\n      value: function _filterNonAnimatedProps(inputProps) {\n        var _this3 = this;\n\n        var props = {};\n\n        var _loop = function _loop(key) {\n          var value = inputProps[key];\n\n          if (key === 'style') {\n            var styles = Array.isArray(value) ? value : [value];\n            var processedStyle = styles.map(function (style) {\n              if (style && style.viewDescriptor) {\n                if (style.viewRef.current === null) {\n                  style.viewRef.current = _this3;\n                }\n\n                return style.initial;\n              } else {\n                return style;\n              }\n            });\n            props[key] = _this3._filterNonAnimatedStyle(StyleSheet.flatten(processedStyle));\n          } else if (key === 'animatedProps') {\n            Object.keys(value.initial).forEach(function (key) {\n              props[key] = value.initial[key];\n\n              if (value.viewRef.current === null) {\n                value.viewRef.current = _this3;\n              }\n            });\n          } else if (value instanceof AnimatedEvent) {\n            props[key] = dummyListener;\n          } else if (value != null && value.current && value.current instanceof WorkletEventHandler) {\n            if (value.current.eventNames.length > 0) {\n              value.current.eventNames.forEach(function (eventName) {\n                props[eventName] = value.current.listeners ? value.current.listeners[eventName] : dummyListener;\n              });\n            } else {\n              props[key] = dummyListener;\n            }\n          } else if (!(value instanceof AnimatedNode)) {\n            props[key] = value;\n          } else if (value instanceof AnimatedValue) {\n            props[key] = value._startingValue;\n          }\n        };\n\n        for (var key in inputProps) {\n          _loop(key);\n        }\n\n        return props;\n      }\n    }, {\n      key: \"render\",\n      value: function render() {\n        var props = this._filterNonAnimatedProps(this.props);\n\n        if (process.env.JEST_WORKER_ID) {\n          props.animatedStyle = this.animatedStyle;\n        }\n\n        var platformProps = Platform.select({\n          web: {},\n          default: {\n            collapsable: false\n          }\n        });\n        return React.createElement(Component, _extends({}, props, {\n          ref: this._setComponentRef\n        }, platformProps));\n      }\n    }]);\n\n    return AnimatedComponent;\n  }(React.Component);\n\n  AnimatedComponent.displayName = \"AnimatedComponent(\" + (Component.displayName || Component.name || 'Component') + \")\";\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return React.createElement(AnimatedComponent, _extends({}, props, ref == null ? null : {\n      forwardedRef: ref\n    }));\n  });\n}","map":{"version":3,"names":["React","ReanimatedEventEmitter","AnimatedEvent","AnimatedNode","AnimatedValue","createOrReusePropsNode","WorkletEventHandler","setAndForwardRef","invariant","adaptViewConfig","RNRenderer","NODE_MAPPING","Map","listener","data","component","get","viewTag","_updateFromNative","props","dummyListener","hasAnimatedNodes","value","Array","isArray","some","item","Object","keys","key","flattenArray","array","resultArr","_flattenArray","arr","forEach","push","createAnimatedComponent","Component","options","prototype","isReactComponent","AnimatedComponent","_invokeAnimatedPropsCallbackOnMount","_animatedPropsCallback","_component","setNativeProps","forceUpdate","_propsAnimated","__getValue","_setComponentRef","getForwardedRef","forwardedRef","setLocalRef","ref","getNode","console","warn","constructor","name","_attachProps","process","env","JEST_WORKER_ID","animatedStyle","_detachPropUpdater","__detach","_detachNativeEvents","setNativeView","_attachNativeEvents","_attachPropUpdater","_attachAnimatedStyles","getScrollableNode","node","_getEventViewRef","findNodeHandle","prop","attachEvent","current","registerForEvents","detachEvent","unregisterFromEvents","prevProps","attached","Set","nextEvts","add","__nodeID","undefined","has","reattachNeeded","nextProps","oldPropsAnimated","set","size","addListener","styles","style","viewName","Platform","OS","hostInstance","findHostInstance_DEPRECATED","Error","_nativeTag","viewConfig","uiViewClassName","_hasReanimated2Props","viewDescriptor","tag","initial","animatedProps","flattenStyles","hasOwnProperty","delete","removeAllListeners","_reattachNativeEvents","inputStyle","_startingValue","inputProps","processedStyle","map","viewRef","_filterNonAnimatedStyle","StyleSheet","flatten","eventNames","length","eventName","listeners","_filterNonAnimatedProps","platformProps","select","web","default","collapsable","displayName","forwardRef","AnimatedComponentWrapper"],"sources":["C:/Users/sulai/Desktop/fyp/FYP/aut_Veh_num_det/Auto_Veh_front_end/node_modules/react-native-reanimated/lib/createAnimatedComponent.js"],"sourcesContent":["import React from 'react';\nimport { findNodeHandle, Platform, StyleSheet } from 'react-native';\nimport ReanimatedEventEmitter from './ReanimatedEventEmitter';\n\nimport AnimatedEvent from './reanimated1/core/AnimatedEvent';\nimport AnimatedNode from './reanimated1/core/AnimatedNode';\nimport AnimatedValue from './reanimated1/core/AnimatedValue';\nimport { createOrReusePropsNode } from './reanimated1/core/AnimatedProps';\nimport WorkletEventHandler from './reanimated2/WorkletEventHandler';\nimport setAndForwardRef from './setAndForwardRef';\n\nimport invariant from 'fbjs/lib/invariant';\nimport { adaptViewConfig } from './ConfigHelper';\nimport { RNRenderer } from './reanimated2/platform-specific/RNRenderer';\n\nconst NODE_MAPPING = new Map();\n\nfunction listener(data) {\n  const component = NODE_MAPPING.get(data.viewTag);\n  component && component._updateFromNative(data.props);\n}\n\nfunction dummyListener() {\n  // empty listener we use to assign to listener properties for which animated\n  // event is used.\n}\n\nfunction hasAnimatedNodes(value) {\n  if (value instanceof AnimatedNode) {\n    return true;\n  }\n  if (Array.isArray(value)) {\n    return value.some((item) => hasAnimatedNodes(item));\n  }\n  if (value && typeof value === 'object') {\n    return Object.keys(value).some((key) => hasAnimatedNodes(value[key]));\n  }\n  return false;\n}\n\nfunction flattenArray(array) {\n  if (!Array.isArray(array)) {\n    return array;\n  }\n  const resultArr = [];\n\n  const _flattenArray = (arr) => {\n    arr.forEach((item) => {\n      if (Array.isArray(item)) {\n        _flattenArray(item);\n      } else {\n        resultArr.push(item);\n      }\n    });\n  };\n  _flattenArray(array);\n  return resultArr;\n}\n\nexport default function createAnimatedComponent(Component, options = {}) {\n  invariant(\n    typeof Component !== 'function' ||\n      (Component.prototype && Component.prototype.isReactComponent),\n    '`createAnimatedComponent` does not support stateless functional components; ' +\n      'use a class component instead.'\n  );\n\n  class AnimatedComponent extends React.Component {\n    _invokeAnimatedPropsCallbackOnMount = false;\n\n    constructor(props) {\n      super(props);\n      this._attachProps(this.props);\n      if (process.env.JEST_WORKER_ID) {\n        this.animatedStyle = { value: {} };\n      }\n    }\n\n    componentWillUnmount() {\n      this._detachPropUpdater();\n      this._propsAnimated && this._propsAnimated.__detach();\n      this._detachNativeEvents();\n    }\n\n    componentDidMount() {\n      if (this._invokeAnimatedPropsCallbackOnMount) {\n        this._invokeAnimatedPropsCallbackOnMount = false;\n        this._animatedPropsCallback();\n      }\n\n      this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n      this._attachNativeEvents();\n      this._attachPropUpdater();\n      this._attachAnimatedStyles();\n    }\n\n    _getEventViewRef() {\n      // Make sure to get the scrollable node for components that implement\n      // `ScrollResponder.Mixin`.\n      return this._component.getScrollableNode\n        ? this._component.getScrollableNode()\n        : this._component;\n    }\n\n    _attachNativeEvents() {\n      const node = this._getEventViewRef();\n      const viewTag = findNodeHandle(options.setNativeProps ? this : node);\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.attachEvent(node, key);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.registerForEvents(viewTag, key);\n        }\n      }\n    }\n\n    _detachNativeEvents() {\n      const node = this._getEventViewRef();\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          prop.detachEvent(node, key);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n    }\n\n    _reattachNativeEvents(prevProps) {\n      const node = this._getEventViewRef();\n      const attached = new Set();\n      const nextEvts = new Set();\n      let viewTag;\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          nextEvts.add(prop.__nodeID);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler\n        ) {\n          if (viewTag === undefined) {\n            viewTag = prop.current.viewTag;\n          }\n        }\n      }\n      for (const key in prevProps) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent) {\n          if (!nextEvts.has(prop.__nodeID)) {\n            // event was in prev props but not in current props, we detach\n            prop.detachEvent(node, key);\n          } else {\n            // event was in prev and is still in current props\n            attached.add(prop.__nodeID);\n          }\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          prop.current.unregisterFromEvents();\n        }\n      }\n\n      for (const key in this.props) {\n        const prop = this.props[key];\n        if (prop instanceof AnimatedEvent && !attached.has(prop.__nodeID)) {\n          // not yet attached\n          prop.attachEvent(node, key);\n        } else if (\n          prop?.current &&\n          prop.current instanceof WorkletEventHandler &&\n          prop.current.reattachNeeded\n        ) {\n          prop.current.registerForEvents(viewTag, key);\n          prop.current.reattachNeeded = false;\n        }\n      }\n    }\n\n    // The system is best designed when setNativeProps is implemented. It is\n    // able to avoid re-rendering and directly set the attributes that changed.\n    // However, setNativeProps can only be implemented on native components\n    // If you want to animate a composite component, you need to re-render it.\n    // In this case, we have a fallback that uses forceUpdate.\n    _animatedPropsCallback = () => {\n      if (this._component == null) {\n        // AnimatedProps is created in will-mount because it's used in render.\n        // But this callback may be invoked before mount in async mode,\n        // In which case we should defer the setNativeProps() call.\n        // React may throw away uncommitted work in async mode,\n        // So a deferred call won't always be invoked.\n        this._invokeAnimatedPropsCallbackOnMount = true;\n      } else if (typeof this._component.setNativeProps !== 'function') {\n        this.forceUpdate();\n      } else {\n        this._component.setNativeProps(this._propsAnimated.__getValue());\n      }\n    };\n\n    _attachProps(nextProps) {\n      const oldPropsAnimated = this._propsAnimated;\n\n      this._propsAnimated = createOrReusePropsNode(\n        nextProps,\n        this._animatedPropsCallback,\n        oldPropsAnimated\n      );\n      // If prop node has been reused we don't need to call into \"__detach\"\n      if (oldPropsAnimated !== this._propsAnimated) {\n        // When you call detach, it removes the element from the parent list\n        // of children. If it goes to 0, then the parent also detaches itself\n        // and so on.\n        // An optimization is to attach the new elements and THEN detach the old\n        // ones instead of detaching and THEN attaching.\n        // This way the intermediate state isn't to go to 0 and trigger\n        // this expensive recursive detaching to then re-attach everything on\n        // the very next operation.\n        oldPropsAnimated && oldPropsAnimated.__detach();\n      }\n    }\n\n    _updateFromNative(props) {\n      if (options.setNativeProps) {\n        options.setNativeProps(this._component, props);\n      } else {\n        // eslint-disable-next-line no-unused-expressions\n        this._component.setNativeProps?.(props);\n      }\n    }\n\n    _attachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.set(viewTag, this);\n      if (NODE_MAPPING.size === 1) {\n        ReanimatedEventEmitter.addListener('onReanimatedPropsChange', listener);\n      }\n    }\n\n    _attachAnimatedStyles() {\n      let styles = Array.isArray(this.props.style)\n        ? this.props.style\n        : [this.props.style];\n      styles = flattenArray(styles);\n      let viewTag, viewName;\n      if (Platform.OS === 'web') {\n        viewTag = findNodeHandle(this);\n        viewName = null;\n      } else {\n        // hostInstance can be null for a component that doesn't render anything (render function returns null). Example: svg Stop: https://github.com/react-native-svg/react-native-svg/blob/develop/src/elements/Stop.tsx\n        const hostInstance = RNRenderer.findHostInstance_DEPRECATED(this);\n        if (!hostInstance) {\n          throw new Error(\n            'Cannot find host instance for this component. Maybe it renders nothing?'\n          );\n        }\n        // we can access view tag in the same way it's accessed here https://github.com/facebook/react/blob/e3f4eb7272d4ca0ee49f27577156b57eeb07cf73/packages/react-native-renderer/src/ReactFabric.js#L146\n        viewTag = hostInstance?._nativeTag;\n        /**\n         * RN uses viewConfig for components for storing different properties of the component(example: https://github.com/facebook/react-native/blob/master/Libraries/Components/ScrollView/ScrollViewViewConfig.js#L16).\n         * The name we're looking for is in the field named uiViewClassName.\n         */\n        viewName = hostInstance?.viewConfig?.uiViewClassName;\n        // update UI props whitelist for this view\n        if (\n          hostInstance &&\n          this._hasReanimated2Props(styles) &&\n          hostInstance.viewConfig\n        ) {\n          adaptViewConfig(hostInstance.viewConfig);\n        }\n      }\n\n      styles.forEach((style) => {\n        if (style?.viewDescriptor) {\n          style.viewDescriptor.value = { tag: viewTag, name: viewName };\n          if (process.env.JEST_WORKER_ID) {\n            /**\n             * We need to connect Jest's TestObject instance whose contains just props object\n             * with the updateProps() function where we update the properties of the component.\n             * We can't update props object directly because TestObject contains a copy of props - look at render function:\n             * const props = this._filterNonAnimatedProps(this.props);\n             */\n            this.animatedStyle.value = {\n              ...this.animatedStyle.value,\n              ...style.initial,\n            };\n            style.animatedStyle.current = this.animatedStyle;\n          }\n        }\n      });\n      // attach animatedProps property\n      if (this.props.animatedProps?.viewDescriptor) {\n        this.props.animatedProps.viewDescriptor.value = {\n          tag: viewTag,\n          name: viewName,\n        };\n      }\n    }\n\n    _hasReanimated2Props(flattenStyles) {\n      if (this.props.animatedProps?.viewDescriptor) {\n        return true;\n      }\n      if (this.props.style) {\n        for (const style of flattenStyles) {\n          // eslint-disable-next-line no-prototype-builtins\n          if (style?.hasOwnProperty('viewDescriptor')) {\n            return true;\n          }\n        }\n      }\n      return false;\n    }\n\n    _detachPropUpdater() {\n      const viewTag = findNodeHandle(this);\n      NODE_MAPPING.delete(viewTag);\n      if (NODE_MAPPING.size === 0) {\n        ReanimatedEventEmitter.removeAllListeners('onReanimatedPropsChange');\n      }\n    }\n\n    componentDidUpdate(prevProps) {\n      this._attachProps(this.props);\n      this._reattachNativeEvents(prevProps);\n\n      this._propsAnimated && this._propsAnimated.setNativeView(this._component);\n    }\n\n    _setComponentRef = setAndForwardRef({\n      getForwardedRef: () => this.props.forwardedRef,\n      setLocalRef: (ref) => {\n        if (ref !== this._component) {\n          this._component = ref;\n        }\n\n        // TODO: Delete this after React Native also deletes this deprecation helper.\n        if (ref != null && ref.getNode == null) {\n          ref.getNode = () => {\n            console.warn(\n              '%s: Calling %s on the ref of an Animated component ' +\n                'is no longer necessary. You can now directly use the ref ' +\n                'instead. This method will be removed in a future release.',\n              ref.constructor.name ?? '<<anonymous>>',\n              'getNode()'\n            );\n            return ref;\n          };\n        }\n      },\n    });\n\n    _filterNonAnimatedStyle(inputStyle) {\n      const style = {};\n      for (const key in inputStyle) {\n        const value = inputStyle[key];\n        if (!hasAnimatedNodes(value)) {\n          style[key] = value;\n        } else if (value instanceof AnimatedValue) {\n          // if any style in animated component is set directly to the `Value` we set those styles to the first value of `Value` node in order\n          // to avoid flash of default styles when `Value` is being asynchrounously sent via bridge and initialized in the native side.\n          style[key] = value._startingValue;\n        }\n      }\n      return style;\n    }\n\n    _filterNonAnimatedProps(inputProps) {\n      const props = {};\n      for (const key in inputProps) {\n        const value = inputProps[key];\n        if (key === 'style') {\n          const styles = Array.isArray(value) ? value : [value];\n          const processedStyle = styles.map((style) => {\n            if (style && style.viewDescriptor) {\n              // this is how we recognize styles returned by useAnimatedStyle\n              if (style.viewRef.current === null) {\n                style.viewRef.current = this;\n              }\n              return style.initial;\n            } else {\n              return style;\n            }\n          });\n          props[key] = this._filterNonAnimatedStyle(\n            StyleSheet.flatten(processedStyle)\n          );\n        } else if (key === 'animatedProps') {\n          Object.keys(value.initial).forEach((key) => {\n            props[key] = value.initial[key];\n            if (value.viewRef.current === null) {\n              value.viewRef.current = this;\n            }\n          });\n        } else if (value instanceof AnimatedEvent) {\n          // we cannot filter out event listeners completely as some components\n          // rely on having a callback registered in order to generate events\n          // alltogether. Therefore we provide a dummy callback here to allow\n          // native event dispatcher to hijack events.\n          props[key] = dummyListener;\n        } else if (\n          value?.current &&\n          value.current instanceof WorkletEventHandler\n        ) {\n          if (value.current.eventNames.length > 0) {\n            value.current.eventNames.forEach((eventName) => {\n              props[eventName] = value.current.listeners\n                ? value.current.listeners[eventName]\n                : dummyListener;\n            });\n          } else {\n            props[key] = dummyListener;\n          }\n        } else if (!(value instanceof AnimatedNode)) {\n          props[key] = value;\n        } else if (value instanceof AnimatedValue) {\n          // if any prop in animated component is set directly to the `Value` we set those props to the first value of `Value` node in order\n          // to avoid default values for a short moment when `Value` is being asynchrounously sent via bridge and initialized in the native side.\n          props[key] = value._startingValue;\n        }\n      }\n      return props;\n    }\n\n    render() {\n      const props = this._filterNonAnimatedProps(this.props);\n      if (process.env.JEST_WORKER_ID) {\n        props.animatedStyle = this.animatedStyle;\n      }\n\n      const platformProps = Platform.select({\n        web: {},\n        default: { collapsable: false },\n      });\n      return (\n        <Component {...props} ref={this._setComponentRef} {...platformProps} />\n      );\n    }\n  }\n\n  AnimatedComponent.displayName = `AnimatedComponent(${\n    Component.displayName || Component.name || 'Component'\n  })`;\n\n  return React.forwardRef(function AnimatedComponentWrapper(props, ref) {\n    return (\n      <AnimatedComponent\n        {...props}\n        {...(ref == null ? null : { forwardedRef: ref })}\n      />\n    );\n  });\n}\n"],"mappings":"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"},"metadata":{},"sourceType":"module"}