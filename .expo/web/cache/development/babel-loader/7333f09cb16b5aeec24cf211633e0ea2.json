{"ast":null,"code":"import _defineProperty from \"@babel/runtime/helpers/defineProperty\";\n\nvar _MediaTypeInput;\n\nfunction ownKeys(object, enumerableOnly) { var keys = Object.keys(object); if (Object.getOwnPropertySymbols) { var symbols = Object.getOwnPropertySymbols(object); enumerableOnly && (symbols = symbols.filter(function (sym) { return Object.getOwnPropertyDescriptor(object, sym).enumerable; })), keys.push.apply(keys, symbols); } return keys; }\n\nfunction _objectSpread(target) { for (var i = 1; i < arguments.length; i++) { var source = null != arguments[i] ? arguments[i] : {}; i % 2 ? ownKeys(Object(source), !0).forEach(function (key) { _defineProperty(target, key, source[key]); }) : Object.getOwnPropertyDescriptors ? Object.defineProperties(target, Object.getOwnPropertyDescriptors(source)) : ownKeys(Object(source)).forEach(function (key) { Object.defineProperty(target, key, Object.getOwnPropertyDescriptor(source, key)); }); } return target; }\n\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { PermissionStatus, Platform } from 'expo-modules-core';\nimport { v4 } from 'uuid';\nimport { MediaTypeOptions } from \"./ImagePicker.types\";\nvar MediaTypeInput = (_MediaTypeInput = {}, _defineProperty(_MediaTypeInput, MediaTypeOptions.All, 'video/mp4,video/quicktime,video/x-m4v,video/*,image/*'), _defineProperty(_MediaTypeInput, MediaTypeOptions.Images, 'image/*'), _defineProperty(_MediaTypeInput, MediaTypeOptions.Videos, 'video/mp4,video/quicktime,video/x-m4v,video/*'), _MediaTypeInput);\nexport default {\n  get name() {\n    return 'ExponentImagePicker';\n  },\n\n  launchImageLibraryAsync: function launchImageLibraryAsync(_ref) {\n    return function _callee() {\n      var _ref$mediaTypes, mediaTypes, _ref$allowsMultipleSe, allowsMultipleSelection, _ref$base, base64;\n\n      return _regeneratorRuntime.async(function _callee$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _ref$mediaTypes = _ref.mediaTypes, mediaTypes = _ref$mediaTypes === void 0 ? MediaTypeOptions.Images : _ref$mediaTypes, _ref$allowsMultipleSe = _ref.allowsMultipleSelection, allowsMultipleSelection = _ref$allowsMultipleSe === void 0 ? false : _ref$allowsMultipleSe, _ref$base = _ref.base64, base64 = _ref$base === void 0 ? false : _ref$base;\n\n              if (Platform.isDOMAvailable) {\n                _context.next = 3;\n                break;\n              }\n\n              return _context.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 3:\n              _context.next = 5;\n              return _regeneratorRuntime.awrap(openFileBrowserAsync({\n                mediaTypes: mediaTypes,\n                allowsMultipleSelection: allowsMultipleSelection,\n                base64: base64\n              }));\n\n            case 5:\n              return _context.abrupt(\"return\", _context.sent);\n\n            case 6:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  launchCameraAsync: function launchCameraAsync(_ref2) {\n    return function _callee2() {\n      var _ref2$mediaTypes, mediaTypes, _ref2$allowsMultipleS, allowsMultipleSelection, _ref2$base, base64;\n\n      return _regeneratorRuntime.async(function _callee2$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _ref2$mediaTypes = _ref2.mediaTypes, mediaTypes = _ref2$mediaTypes === void 0 ? MediaTypeOptions.Images : _ref2$mediaTypes, _ref2$allowsMultipleS = _ref2.allowsMultipleSelection, allowsMultipleSelection = _ref2$allowsMultipleS === void 0 ? false : _ref2$allowsMultipleS, _ref2$base = _ref2.base64, base64 = _ref2$base === void 0 ? false : _ref2$base;\n\n              if (Platform.isDOMAvailable) {\n                _context2.next = 3;\n                break;\n              }\n\n              return _context2.abrupt(\"return\", {\n                cancelled: true\n              });\n\n            case 3:\n              _context2.next = 5;\n              return _regeneratorRuntime.awrap(openFileBrowserAsync({\n                mediaTypes: mediaTypes,\n                allowsMultipleSelection: allowsMultipleSelection,\n                capture: true,\n                base64: base64\n              }));\n\n            case 5:\n              return _context2.abrupt(\"return\", _context2.sent);\n\n            case 6:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getCameraPermissionsAsync: function getCameraPermissionsAsync() {\n    return function _callee3() {\n      return _regeneratorRuntime.async(function _callee3$(_context3) {\n        while (1) {\n          switch (_context3.prev = _context3.next) {\n            case 0:\n              return _context3.abrupt(\"return\", permissionGrantedResponse());\n\n            case 1:\n            case \"end\":\n              return _context3.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  requestCameraPermissionsAsync: function requestCameraPermissionsAsync() {\n    return function _callee4() {\n      return _regeneratorRuntime.async(function _callee4$(_context4) {\n        while (1) {\n          switch (_context4.prev = _context4.next) {\n            case 0:\n              return _context4.abrupt(\"return\", permissionGrantedResponse());\n\n            case 1:\n            case \"end\":\n              return _context4.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  getMediaLibraryPermissionsAsync: function getMediaLibraryPermissionsAsync(_writeOnly) {\n    return function _callee5() {\n      return _regeneratorRuntime.async(function _callee5$(_context5) {\n        while (1) {\n          switch (_context5.prev = _context5.next) {\n            case 0:\n              return _context5.abrupt(\"return\", permissionGrantedResponse());\n\n            case 1:\n            case \"end\":\n              return _context5.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  },\n  requestMediaLibraryPermissionsAsync: function requestMediaLibraryPermissionsAsync(_writeOnly) {\n    return function _callee6() {\n      return _regeneratorRuntime.async(function _callee6$(_context6) {\n        while (1) {\n          switch (_context6.prev = _context6.next) {\n            case 0:\n              return _context6.abrupt(\"return\", permissionGrantedResponse());\n\n            case 1:\n            case \"end\":\n              return _context6.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    }();\n  }\n};\n\nfunction permissionGrantedResponse() {\n  return {\n    status: PermissionStatus.GRANTED,\n    expires: 'never',\n    granted: true,\n    canAskAgain: true\n  };\n}\n\nfunction openFileBrowserAsync(_ref3) {\n  var mediaTypes = _ref3.mediaTypes,\n      _ref3$capture = _ref3.capture,\n      capture = _ref3$capture === void 0 ? false : _ref3$capture,\n      _ref3$allowsMultipleS = _ref3.allowsMultipleSelection,\n      allowsMultipleSelection = _ref3$allowsMultipleS === void 0 ? false : _ref3$allowsMultipleS,\n      base64 = _ref3.base64;\n  var mediaTypeFormat = MediaTypeInput[mediaTypes];\n  var input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', v4());\n\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n\n  if (capture) {\n    input.setAttribute('capture', 'camera');\n  }\n\n  document.body.appendChild(input);\n  return new Promise(function (resolve, reject) {\n    input.addEventListener('change', function _callee7() {\n      var img, imgs;\n      return _regeneratorRuntime.async(function _callee7$(_context7) {\n        while (1) {\n          switch (_context7.prev = _context7.next) {\n            case 0:\n              if (!input.files) {\n                _context7.next = 12;\n                break;\n              }\n\n              if (allowsMultipleSelection) {\n                _context7.next = 8;\n                break;\n              }\n\n              _context7.next = 4;\n              return _regeneratorRuntime.awrap(readFile(input.files[0], {\n                base64: base64\n              }));\n\n            case 4:\n              img = _context7.sent;\n              resolve(_objectSpread({\n                cancelled: false\n              }, img));\n              _context7.next = 12;\n              break;\n\n            case 8:\n              _context7.next = 10;\n              return _regeneratorRuntime.awrap(Promise.all(Array.from(input.files).map(function (file) {\n                return readFile(file, {\n                  base64: base64\n                });\n              })));\n\n            case 10:\n              imgs = _context7.sent;\n              resolve({\n                cancelled: false,\n                selected: imgs\n              });\n\n            case 12:\n              document.body.removeChild(input);\n\n            case 13:\n            case \"end\":\n              return _context7.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    });\n    var event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n\nfunction readFile(targetFile, options) {\n  return new Promise(function (resolve, reject) {\n    var reader = new FileReader();\n\n    reader.onerror = function () {\n      reject(new Error(\"Failed to read the selected media because the operation failed.\"));\n    };\n\n    reader.onload = function (_ref4) {\n      var target = _ref4.target;\n      var uri = target.result;\n\n      var returnRaw = function returnRaw() {\n        return resolve({\n          uri: uri,\n          width: 0,\n          height: 0\n        });\n      };\n\n      if (typeof (target == null ? void 0 : target.result) === 'string') {\n        var image = new Image();\n        image.src = target.result;\n\n        image.onload = function () {\n          var _image$naturalWidth, _image$naturalHeight;\n\n          return resolve(_objectSpread({\n            uri: uri,\n            width: (_image$naturalWidth = image.naturalWidth) != null ? _image$naturalWidth : image.width,\n            height: (_image$naturalHeight = image.naturalHeight) != null ? _image$naturalHeight : image.height\n          }, options.base64 && {\n            base64: uri.substr(uri.indexOf(',') + 1)\n          }));\n        };\n\n        image.onerror = function () {\n          return returnRaw();\n        };\n      } else {\n        returnRaw();\n      }\n    };\n\n    reader.readAsDataURL(targetFile);\n  });\n}","map":{"version":3,"sources":["../src/ExponentImagePicker.web.ts"],"names":[],"mappings":"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","sourcesContent":["import { PermissionResponse, PermissionStatus, Platform } from 'expo-modules-core';\nimport { v4 } from 'uuid';\n\nimport {\n  ExpandImagePickerResult,\n  ImageInfo,\n  ImagePickerMultipleResult,\n  ImagePickerResult,\n  MediaTypeOptions,\n  OpenFileBrowserOptions,\n} from './ImagePicker.types';\n\nconst MediaTypeInput = {\n  [MediaTypeOptions.All]: 'video/mp4,video/quicktime,video/x-m4v,video/*,image/*',\n  [MediaTypeOptions.Images]: 'image/*',\n  [MediaTypeOptions.Videos]: 'video/mp4,video/quicktime,video/x-m4v,video/*',\n};\n\nexport default {\n  get name(): string {\n    return 'ExponentImagePicker';\n  },\n\n  async launchImageLibraryAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult | ImagePickerMultipleResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { cancelled: true };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      base64,\n    });\n  },\n\n  async launchCameraAsync({\n    mediaTypes = MediaTypeOptions.Images,\n    allowsMultipleSelection = false,\n    base64 = false,\n  }): Promise<ImagePickerResult | ImagePickerMultipleResult> {\n    // SSR guard\n    if (!Platform.isDOMAvailable) {\n      return { cancelled: true };\n    }\n    return await openFileBrowserAsync({\n      mediaTypes,\n      allowsMultipleSelection,\n      capture: true,\n      base64,\n    });\n  },\n\n  /*\n   * Delegate to expo-permissions to request camera permissions\n   */\n  async getCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n  async requestCameraPermissionsAsync() {\n    return permissionGrantedResponse();\n  },\n\n  /*\n   * Camera roll permissions don't need to be requested on web, so we always\n   * respond with granted.\n   */\n  async getMediaLibraryPermissionsAsync(_writeOnly: boolean) {\n    return permissionGrantedResponse();\n  },\n  async requestMediaLibraryPermissionsAsync(_writeOnly: boolean): Promise<PermissionResponse> {\n    return permissionGrantedResponse();\n  },\n};\n\nfunction permissionGrantedResponse(): PermissionResponse {\n  return {\n    status: PermissionStatus.GRANTED,\n    expires: 'never',\n    granted: true,\n    canAskAgain: true,\n  };\n}\n\nfunction openFileBrowserAsync<T extends OpenFileBrowserOptions>({\n  mediaTypes,\n  capture = false,\n  allowsMultipleSelection = false,\n  base64,\n}: T): Promise<ExpandImagePickerResult<T>> {\n  const mediaTypeFormat = MediaTypeInput[mediaTypes];\n\n  const input = document.createElement('input');\n  input.style.display = 'none';\n  input.setAttribute('type', 'file');\n  input.setAttribute('accept', mediaTypeFormat);\n  input.setAttribute('id', v4());\n  if (allowsMultipleSelection) {\n    input.setAttribute('multiple', 'multiple');\n  }\n  if (capture) {\n    input.setAttribute('capture', 'camera');\n  }\n  document.body.appendChild(input);\n\n  return new Promise((resolve, reject) => {\n    input.addEventListener('change', async () => {\n      if (input.files) {\n        if (!allowsMultipleSelection) {\n          const img: ImageInfo = await readFile(input.files[0], { base64 });\n          resolve({\n            cancelled: false,\n            ...img,\n          } as ExpandImagePickerResult<T>);\n        } else {\n          const imgs: ImageInfo[] = await Promise.all(\n            Array.from(input.files).map((file) => readFile(file, { base64 }))\n          );\n          resolve({\n            cancelled: false,\n            selected: imgs,\n          } as ExpandImagePickerResult<T>);\n        }\n      }\n      document.body.removeChild(input);\n    });\n\n    const event = new MouseEvent('click');\n    input.dispatchEvent(event);\n  });\n}\n\nfunction readFile(targetFile: Blob, options: { base64: boolean }): Promise<ImageInfo> {\n  return new Promise((resolve, reject) => {\n    const reader = new FileReader();\n    reader.onerror = () => {\n      reject(new Error(`Failed to read the selected media because the operation failed.`));\n    };\n    reader.onload = ({ target }) => {\n      const uri = (target as any).result;\n      const returnRaw = () =>\n        resolve({\n          uri,\n          width: 0,\n          height: 0,\n        });\n\n      if (typeof target?.result === 'string') {\n        const image = new Image();\n        image.src = target.result;\n        image.onload = () =>\n          resolve({\n            uri,\n            width: image.naturalWidth ?? image.width,\n            height: image.naturalHeight ?? image.height,\n            // The blob's result cannot be directly decoded as Base64 without\n            // first removing the Data-URL declaration preceding the\n            // Base64-encoded data. To retrieve only the Base64 encoded string,\n            // first remove data:*/*;base64, from the result.\n            // https://developer.mozilla.org/en-US/docs/Web/API/FileReader/readAsDataURL\n            ...(options.base64 && { base64: uri.substr(uri.indexOf(',') + 1) }),\n          });\n        image.onerror = () => returnRaw();\n      } else {\n        returnRaw();\n      }\n    };\n\n    reader.readAsDataURL(targetFile);\n  });\n}\n"],"sourceRoot":""},"metadata":{},"sourceType":"module"}