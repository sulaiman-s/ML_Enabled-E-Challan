{"ast":null,"code":"import _slicedToArray from \"@babel/runtime/helpers/slicedToArray\";\nimport _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport React, { useState } from \"react\";\nimport Label from \"../compnents/label\";\nimport Screen from \"../compnents/Screen\";\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\nimport Text from \"react-native-web/dist/exports/Text\";\nimport TouchableNativeFeedback from \"react-native-web/dist/exports/TouchableNativeFeedback\";\nimport View from \"react-native-web/dist/exports/View\";\nimport Image from \"react-native-web/dist/exports/Image\";\nimport StyleSheet from \"react-native-web/dist/exports/StyleSheet\";\nimport AppButton from \"../compnents/AppButton\";\nimport * as ImagePicker from \"expo-image-picker\";\nimport { useNavigation } from \"@react-navigation/core\";\n\nfunction AdminCapture(props) {\n  var navigation = useNavigation();\n\n  var _useState = useState(),\n      _useState2 = _slicedToArray(_useState, 2),\n      url = _useState2[0],\n      setUrl = _useState2[1];\n\n  var handleImageFromCamera = function handleImageFromCamera() {\n    var result;\n    return _regeneratorRuntime.async(function handleImageFromCamera$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            _context.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchCameraAsync());\n\n          case 2:\n            result = _context.sent;\n            if (!result.cancelled) setUrl(result.uri);\n\n          case 4:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  var handleImageFromLibrary = function handleImageFromLibrary() {\n    var result;\n    return _regeneratorRuntime.async(function handleImageFromLibrary$(_context2) {\n      while (1) {\n        switch (_context2.prev = _context2.next) {\n          case 0:\n            _context2.next = 2;\n            return _regeneratorRuntime.awrap(ImagePicker.launchImageLibraryAsync());\n\n          case 2:\n            result = _context2.sent;\n            if (!result.cancelled) setUrl(result.uri);\n\n          case 4:\n          case \"end\":\n            return _context2.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  };\n\n  return React.createElement(Screen, null, React.createElement(Text, null, \"Waiting... \"), React.createElement(TouchableNativeFeedback, {\n    onPress: handleImageFromLibrary\n  }, React.createElement(View, {\n    style: {\n      backgroundColor: \"lightslategray\",\n      height: 300,\n      width: \"100%\",\n      justifyContent: \"center\",\n      alignItems: \"center\",\n      marginTop: 40,\n      marginBottom: 20\n    }\n  }, url == null ? React.createElement(React.Fragment, null, React.createElement(MaterialCommunityIcons, {\n    name: \"camera\",\n    size: 100,\n    color: \"white\"\n  }), React.createElement(Text, null, \" Select Image From Library \")) : React.createElement(Image, {\n    source: {\n      uri: url\n    },\n    style: {\n      height: \"100%\",\n      width: \"100%\"\n    }\n  }))), React.createElement(AppButton, {\n    title: \"Open Camera\",\n    textStyle: styles.btn_t,\n    height: 50,\n    width: \"100%\",\n    style: styles.btn,\n    onPress: handleImageFromCamera\n  }), React.createElement(AppButton, {\n    title: \"Next\",\n    textStyle: styles.btn_t,\n    height: 50,\n    width: \"100%\",\n    style: styles.btn,\n    onPress: function onPress() {\n      return navigation.navigate(\"entry\");\n    }\n  }));\n}\n\nvar styles = StyleSheet.create({\n  btn: {\n    backgroundColor: \"#4ecdc4\",\n    alignItems: \"center\",\n    justifyContent: \"center\",\n    borderRadius: 5,\n    marginTop: 20\n  },\n  btn_t: {\n    color: \"white\",\n    fontSize: 16\n  }\n});\nexport default AdminCapture;","map":{"version":3,"sources":["C:/Users/Sulaiman/OneDrive/Desktop/FYP/aut_Veh_num_det/Auto_Veh_front_end/app/AdminScreenComponents/AdminCapture.js"],"names":["React","useState","Label","Screen","MaterialCommunityIcons","AppButton","ImagePicker","useNavigation","AdminCapture","props","navigation","url","setUrl","handleImageFromCamera","launchCameraAsync","result","cancelled","uri","handleImageFromLibrary","launchImageLibraryAsync","backgroundColor","height","width","justifyContent","alignItems","marginTop","marginBottom","styles","btn_t","btn","navigate","StyleSheet","create","borderRadius","color","fontSize"],"mappings":"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","sourcesContent":["import React, { useState } from \"react\";\r\nimport Label from \"../compnents/label\";\r\nimport Screen from \"../compnents/Screen\";\r\nimport { MaterialCommunityIcons } from \"@expo/vector-icons\";\r\nimport {\r\n  Text,\r\n  TouchableNativeFeedback,\r\n  View,\r\n  Image,\r\n  StyleSheet,\r\n} from \"react-native\";\r\nimport AppButton from \"../compnents/AppButton\";\r\nimport * as ImagePicker from \"expo-image-picker\";\r\nimport { useNavigation } from \"@react-navigation/core\";\r\n\r\nfunction AdminCapture(props) {\r\n  const navigation = useNavigation();\r\n  const [url, setUrl] = useState();\r\n\r\n  const handleImageFromCamera = async () => {\r\n    const result = await ImagePicker.launchCameraAsync();\r\n    if (!result.cancelled) setUrl(result.uri);\r\n  };\r\n  const handleImageFromLibrary = async () => {\r\n    const result = await ImagePicker.launchImageLibraryAsync();\r\n    if (!result.cancelled) setUrl(result.uri);\r\n  };\r\n  return (\r\n    <Screen>\r\n      <Text>Waiting... </Text>\r\n      <TouchableNativeFeedback onPress={handleImageFromLibrary}>\r\n        <View\r\n          style={{\r\n            backgroundColor: \"lightslategray\",\r\n            height: 300,\r\n            width: \"100%\",\r\n            justifyContent: \"center\",\r\n            alignItems: \"center\",\r\n            marginTop: 40,\r\n            marginBottom: 20,\r\n          }}\r\n        >\r\n          {url == null ? (\r\n            <>\r\n              <MaterialCommunityIcons name=\"camera\" size={100} color=\"white\" />\r\n              <Text> Select Image From Library </Text>\r\n            </>\r\n          ) : (\r\n            <Image\r\n              source={{ uri: url }}\r\n              style={{ height: \"100%\", width: \"100%\" }}\r\n            />\r\n          )}\r\n        </View>\r\n      </TouchableNativeFeedback>\r\n      <AppButton\r\n        title=\"Open Camera\"\r\n        textStyle={styles.btn_t}\r\n        height={50}\r\n        width={\"100%\"}\r\n        style={styles.btn}\r\n        onPress={handleImageFromCamera}\r\n      />\r\n      <AppButton\r\n        title=\"Next\"\r\n        textStyle={styles.btn_t}\r\n        height={50}\r\n        width={\"100%\"}\r\n        style={styles.btn}\r\n        onPress={() => navigation.navigate(\"entry\")}\r\n      />\r\n    </Screen>\r\n  );\r\n}\r\nconst styles = StyleSheet.create({\r\n  btn: {\r\n    backgroundColor: \"#4ecdc4\",\r\n    alignItems: \"center\",\r\n    justifyContent: \"center\",\r\n    borderRadius: 5,\r\n    marginTop: 20,\r\n  },\r\n  btn_t: {\r\n    color: \"white\",\r\n    fontSize: 16,\r\n  },\r\n});\r\n\r\nexport default AdminCapture;\r\n"]},"metadata":{},"sourceType":"module"}